type Buyer @entity {
  id: ID! # buyer
  ownedPlots: [Plot!]! @derivedFrom(field: "buyer")
  sales: [Sale!]! @derivedFrom(field: "buyer")
  plorOperationRecords: [PlotOperationRecord!]! @derivedFrom(field: "operator")
}

type Referrer @entity {
  id: ID!
  referredPlots: [Plot!]! @derivedFrom(field: "referrer")
  referredSales: [Sale!]! @derivedFrom(field: "referrer")
}

type Sale @entity {
  id: ID!
  txHash: String!
  plots: [Plot!]! @derivedFrom(field: "sale")
  amount: BigInt!
  buyer: Buyer!
  referrer: Referrer!
  boughtWithCredits: Boolean!
  timestamp: BigInt!
  block: Int!
}

type PlotOperationRecord @entity {
  id: ID!
  plot: Plot!
  txHash: String!
  block: Int!
  timestamp: BigInt!
  # type: LIST, CHANGE_PRICE, CANCEL, FULFILL, TRANSFER
  # choose `String!` cause codegen doesn't support enum well
  type: String!
  operator: Buyer!
  # when `type` is TRANSFER, `receiver` is set
  receiver: Buyer
  # when `type` is [LIST, CHANGE_PRICE, FULFILL], `price` is set
  price: BigInt
}

type PlotData {
  cyber: Int!
  steampunk: Int!
  wind: Int!
  volcano: Int!
  fire: Int!
  water: Int!
  necro: Int!
  mecha: Int!
  dragon: Int!
  meadow: Int!
  isShore: Int! # 0 = no, 1 = yes
  isIsland: Int! # 0 = mainland, 1 = island
  isMountainFoot: Int! # 0 = no, 1 = yes
  rarity: Int!
  entropy: Int!
}

type Plot @entity {
  id: ID!
  plotId: BigInt!
  buyer: Buyer!
  referrer: Referrer!
  sale: Sale!
  data: PlotData!
  # will set when this plot has bid or transfer
  operationRecords: [PlotOperationRecord!]! @derivedFrom(field: "plot")
}
